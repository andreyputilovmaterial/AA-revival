' This file must be saved with utf-8 with BOM



' -----------------------------------------------------------------------
' IPS Table Shell
'
' -----------------------------------------------------------------------
'Description: Run this script on the MDD prior to running the DMS script to export to Sav
'Loops through all of the Questions, and handles the assigning of Aliases and SubAliases at the VariableInstance Level.
'In certain instances, it grabs information from the parent field (such as with NumericGrids)

'--------------------------------------------------------------------------------------------------------------------------------------------
'Includes and Definitions

#include "Includes/DPrep/PrepMetadata.mrs"
#include "Includes/Globals.mrs"
#define SCRIPT_NAME	 "601_SavPrep.mrs"

'--------------------------------------------------------------------------------------------------------------------------------------------
'Setting up Dimmed variables and Constants for the script
Dim mDocument, mVariable, DataSrc, LoopCounter, LoopQuestion, savDscExists, x

savDscExists = false

Dim DataSource

'!
	Define data file to be converted to SPSS below using DATA_FILE_TO_USE.
	0 --> R data
	1 --> RM (merged) data,
	2 --> STK (stacked) data
!'
#Define DATA_FILE_TO_USE 1

'=======================================================
#if DATA_FILE_TO_USE == 0
	#Define S_MDD_SOURCE		PROCESSED_MDD
	#Define S_MDD 				SAV_Prep_MDD
	#define DATA_FILE 			Sav_DATA
#elif DATA_FILE_TO_USE == 1
	#Define S_MDD_SOURCE 		POSTMERGED_MDD
	#Define S_MDD 				SAV_Prep_MDD_MERGE
	#define DATA_FILE 			Sav_DATA_MERGE
#elif DATA_FILE_TO_USE == 2
	#Define S_MDD_SOURCE 		STK_MDD
	#Define S_MDD 				SAV_Prep_MDD_STK
	#define DATA_FILE 			Sav_DATA_STK
#endif
'=======================================================

'Limit space reserved for Other-Specify Text fields.
'	Regular text fields, Other-specs that already have max lengths, and non-text Other-specs will not be touched.
#Define TRUNCATE_OTHER_TEXT            TRUE
#Define TRUNCATED_OTHER_SIZE           100
#Define TRUNCATED_RESPONDENTID_TEXT    TRUE
#Define TRUNCATED_RESPONDENTID_SIZE    150

'-------------------------------------------------------------------------------------------------------------------------

'Delete an S-MDD if it finds one
Dim Sfso
Set Sfso = CreateObject("Scripting.FileSystemObject")

If (Sfso.FileExists(S_MDD)) Then
	Sfso.DeleteFile(S_MDD)
End If

'--------------------------------------------------------------------------------------------------------------------------------------------

'Open MDD to be transformed
Set mDocument = CreateObject("MDM.Document")
mDocument.Open(S_MDD_SOURCE, "", "&H0003")

Dim oField, oCategory



'If locked, we'll need to add a new version in order to be able to create a new data source `
If mDocument.Versions.Latest.IsLocked Then
	mDocument.Versions.AddNew()
End If

'--------------------------------------------------------------------------------------------------------------------------------------------
'Remove any SAV Data Sources
For Each DataSource In mDocument.DataSources
	If LCase(DataSource.CDSCName) = LCase("mrSavDsc") Then
		savDscExists = True
		mDocument.DataSources.Remove(DataSource.Name)
	End If
Next

'Add new SAV Data Source base on Configurable Path
mDocument.DataSources.AddNew("mrSavDsc", "mrSavDsc", DATA_FILE)

'--------------------------------------------------------------------------------------------------------------------------------------------
'Setup the configuration properties of the generator



Dim MyConfiguration, MyGenerator

For Each DataSource In mDocument.DataSources
	If LCase(DataSource.CDSCName) = LCase("mrSavDsc") Then
 		Set mDocument.DataSources.Current = DataSource

		Set MyGenerator = mDocument.AliasMap.Generator
		Set MyConfiguration = MyGenerator.Configuration
		MyConfiguration.MaxLength = 50
		
		
		
		' ProcessVariable(mDocument)
#include "601_SavPrepRevival.INCLUDE.mrs"
		
		
		
		Set MyGenerator = Null
		Set MyConfiguration = Null
	End If
Next



Sub SetAlias(oField,Shortname)
    Dim oVariableInstance, ShouldSkip, iLevel, oIndexes, iIndexLooper, oParent, oIterationCat, sAlias, oAlias, iCounter, oSubAliases
    Dim sBaseAliasPart, sOwnIterativeAliasPart, sLoopIterativeAliasPart, sCategoricalIterativeAliasPart
    If oField.DataType = 2 Then ' 2 == mr.Text
    	TruncateTextSize(oField)
    End If
    For each oVariableInstance in oField.Variables
        ShouldSkip = False
	    sLoopIterativeAliasPart = ""
        iLevel = oVariableInstance.Indices.Count
        If iLevel>0 Then
            Set oParent = oVariableInstance
            oIndexes = Split(oVariableInstance.Indexes,",")
            If Find(oIndexes,"..") <> -1 Then
                ShouldSkip = True
            Else
                For iIndexLooper = iLevel to 1 Step -1
                    Set oParent = oParent.Parent.Parent
                    ' Check if Parent's Iterations are Categorical First...
                    If oIndexes[iIndexLooper - 1].Find("{") <> -1 Then
                        'Handle Classes in Loops (Go one more level Higher in parent hierarchy)
                        If CheckIsClassOrBlock(oParent) Then
                            Set oIterationCat = oParent.Parent.Categories[StripBraces(oIndexes[iIndexLooper - 1])]
                        Else
                            Set oIterationCat = oParent.Categories[StripBraces(oIndexes[iIndexLooper - 1])]
                        End If
                        sLoopIterativeAliasPart = "_" + ConvertToTripleDigitsText(oIterationCat.Properties["Value"]) + sLoopIterativeAliasPart
                    Else
                        'Otherwise, just convert three digit Index
                        sLoopIterativeAliasPart = "_" + ConvertToTripleDigitsText(oIndexes[iIndexLooper - 1]) + sLoopIterativeAliasPart
                    End If
                Next
            End If
        End If
        If Not ShouldSkip Then
        	'sBaseAliasPart = Shortname
        	'sOwnIterativeAliasPart = "" ' TODO:
			dim re, re_Matches
			set re = CreateObject("VBScript.RegExp")
			re.Pattern = "^(.*?)((?:_[0-9]{3})*)$"
			re.IgnoreCase = True
			re.Global = True
			
		    set re_Matches = re.Execute(Shortname)
		    if re_Matches.Count>0 then
			    sBaseAliasPart  = ctext(re_Matches[0].submatches.item[0])
			    sOwnIterativeAliasPart   = ctext(re_Matches[0].submatches.item[1])
			else
				sBaseAliasPart = Shortname
				sOwnIterativeAliasPart = ""
			end if
        	sCategoricalIterativeAliasPart = "" ' TODO:
            sAlias = sBaseAliasPart + sCategoricalIterativeAliasPart + sLoopIterativeAliasPart + sOwnIterativeAliasPart
            oVariableInstance.AliasName = sAlias
        	If oVariableInstance.DataType = 3 Then ' 3 == Mr.Categorical
        		If oVariableInstance.MaxValue <> 1 Then ' Multi-punch
        			oVariableInstance.MaxValue = Null ' 'NOTE: Removing the MaxValue from the Category, so that it exports as Dichotomous without an Issue
        			oAlias = oVariableInstance.CreateAliasName [sAlias]
        			Set oSubAliases = oVariableInstance.CreateSubAliases [ oAlias ] [ oVariableInstance.Categories.Count ]
        			iCounter = 0
        			For Each oIterationCat in oVariableInstance.Categories
        				oVariableInstance.SubAliasName[iCounter] = oAlias + "_" + ConvertToTripleDigitsText(oVariableInstance.Categories[iCounter].Properties["Value"])
        				iCounter = iCounter + 1
        			Next
        		End If
        	End If
        End If
    Next
End Sub



Sub TruncateTextSize(oField)
	If oField.FullName = "Respondent.ID" Then
		'PRESERVE MORE THAN THE DEFAULT 50 CHARACTERS IN RESPONDENT.ID
#if TRUNCATED_RESPONDENTID_TEXT
		oField.MaxValue = TRUNCATED_RESPONDENTID_SIZE
#endif
	ElseIf oField.MaxValue is not null Then
		' already has max lengths - don't touch
	ElseIf oFIeld.Parent.ObjectTypeValue = 0 Then
		' is a HelperFielf
#if TRUNCATE_OTHER_TEXT
		oField.MaxValue = TRUNCATED_OTHER_SIZE
#endif
	Else
		' regulat text field - do not touch
	End If
End Sub



Function ConvertToTripleDigitsText(iIteration)
	If iIteration < 10 Then
		ConvertToTripleDigitsText = "00" + ctext(iIteration)
	ElseIf iIteration < 100 Then
		ConvertToTripleDigitsText = "0" + ctext(iIteration)
	Else
		ConvertToTripleDigitsText = ctext(iIteration)
	End If
End Function



Function StripBraces(sString)
	StripBraces = Replace(Replace(sString,"{",""),"}","")
End Function



ErrorHandler:

If Err.Number <> 0 Then
	Debug.Log("An Error has occurred on line " + ctext(Err.LineNumber))
	Debug.Log("Description: " + Err.Description)
End If

'------------------------------------------------------------------------------------------------------------------------------------------------
'Save copy of transformed MDD to be used for the DMS export to Sav

mDocument.Save(S_MDD)
mDocument.Close()
'--------------------------------------------------------------------------------------------------------------------------------------------

